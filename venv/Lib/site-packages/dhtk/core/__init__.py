"""DHTK core modules"""

# Import dependencies
from dhtk.core.settings import Settings
from dhtk.core.client import Client
from dhtk.core.loader import ExtensionLoader
import typing
import warnings

warnings.formatwarning = lambda message, *args: f"{message}\n"

__all__ = ("start", "get_module")


# DHTK interface functions
def start(*args: typing.List, **kwargs: dict) -> object:
    """Instantiates a DHTK Settings data object and prints current settings.

    Parameters
    ----------
    **kwargs: dict
        Key word arguments passed to instantiate a DHTK Settings data class.
        Accepts keywords [wd, user, endpoint, dataset, port]

    Returns
    -------
    Settings: object
        A DHTK Settings data object
    """
    # Filter out arguments
    valid = ["user", "wd", "endpoint", "dataset"]

    for arg in args:  # All arguments should be named
        warnings.warn(f"* Unnamed argument: {arg}!\n\tOnly named arguments ({', '.join(valid)}) are accepted")
    for key, value in list(kwargs.items()):
        if key not in valid:  # Misspelled or invalid arguments are ignored
            warnings.warn(f"* {key} argument ignored!")
            del kwargs[key]
        if not value:  # Turn empty values to defaults
            warnings.warn(f"* {key} value was set to default!")
            del kwargs[key]

    # Instantiate settings
    configs = Settings(**kwargs)
    print(f"Current DHTK settings:\n{configs}")

    return configs


def get_module(configs: object, install: bool = True) -> object:
    """DHTK function to return the dataset module required.
    Uses DHTK configurations provided to retrieve the correct
    DHTK extension module

    Parameters
    ----------
    configs: dhtk.settings
        DHTK Settings object
    install: boolean
        If True, DHTK will try to install Docker automatically

    Returns
    -------
    Module: object
        Wrapper module providing access to the DHTK extension module requested
    """
    # Client setting and connection
    endpoint = Client(configs, install)
    # Load extension module wrapper
    module = ExtensionLoader(configs, endpoint).module

    return module
