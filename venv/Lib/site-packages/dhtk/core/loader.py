"""Module to load DHTK extensions modules"""
# Import dependencies modules
import dhtk.core.system as core
import sys
import typing
import importlib
import pathlib
import subprocess
import datetime
import re
import warnings

warnings.formatwarning = lambda message, *args: f"{message}\n"


class ExtensionLoader:
    """
    Class to retrieve the required DHTK extension (dataset) module
    """

    def __init__(self, settings: object, client: object):
        """
        Method to retrieve the required the DHTK extension module.

        Parameters
        ----------
        settings: DHTK Settings object
            Configurations to use
        client: DHTK Client object
            Client to use

        Returns
        -------
        Extension module selected by the user as the .module attribute
        """
        # Retrieve required DHTK settings
        self.LOGS = settings.logger
        self.dataset = settings.dataset
        self.LOGS.info("DATASET: Instantiating Dataset object")


        # Load required module
        module = self._load_module(settings, client)

        # Check remote updates
        remote_check = core.get_date(module.url)
        if self.dataset in settings.modules.keys() and remote_check > settings.modules[self.dataset]:
            msg = "Remote dataset file has been uploaded"
            self.LOGS.debug(f"DATASET: {msg}")
            warnings.warn(msg)
            #res = input("Would you like to update local database? [Yes/\u001b[1mNo\u001b[0m] ") or "no"
            if settings.update_db:
                # remove local record so it restarts the dataset
                del settings.modules[self.dataset]
                module.delete()

            # If module hasn't been set up locally, do so
        if settings.endpoint.startswith("local") and self.dataset not in settings.modules.keys():
            self.LOGS.debug("DATASET: Module not ready. Setting up triplestore locally")
            module.set_up()
            settings.modules[self.dataset] = datetime.datetime.now()

        if module:
            # Save any changes to settings
            settings.save()
            module.welcome()

        self.module = module

        self.LOGS.info("DATASET: Instantiation complete")

    def _load_module(self, settings: object, client: object) -> typing.Union[object, None]:
        """
        Method to load the DHTK extension dataset required.

        Parameters
        ----------
        settings: DHTK Settings object
            Configurations to use
        client: DHTK Client object
            Client to use

        Returns
        -------
        DHTK extension module requested
        """
        # Log call
        self.LOGS.debug(f"DATASET: Dataset._load_module({self.dataset}) method was called")

        # Get extension path
        path = pathlib.Path(__file__).parents[1]
        path = path / "extensions"
        sys.path.append(str(path))

        # Make sure the Module is available
        module = re.sub("dhtk-extension-", "", self.dataset)

        if path / self.dataset not in path.iterdir():
            try:
                cmd = ['-m', 'pip', 'install', '--extra-index-url', "https://test.pypi.org/simple", "dhtk-extension-"+module]
                subprocess.check_call([sys.executable] + cmd)
            except subprocess.CalledProcessError:
                msg = f"Module {self.dataset} not available."
                warnings.warn(msg)
                self.LOGS.error("DATASET: " + msg)

                available = client.check_modules()
                print(f"Available modules: {available}")
                return None

        module = importlib.import_module("dhtk.extensions." + module)
        module = module.Module(settings, client)

        return module
