"""DHTK setting and configurations module"""

# Import dependencies
import dhtk.core.system as core
import re
import pickle
import os
import datetime
import pathlib
import typing
import dataclasses
import logging
import warnings

warnings.formatwarning = lambda message, *args: f"{message}\n"


@dataclasses.dataclass
class Settings:
    """Data class to manage DHTK's settings and behaviour."""
    # Main attributes
    user: str = dataclasses.field(default=pathlib.Path.home().name)
    wd: typing.Union[str, pathlib.PosixPath] = dataclasses.field(default="~/DHTK")
    endpoint: str = dataclasses.field(default=None)
    dataset: str = dataclasses.field(default=None)
    update_db: bool =dataclasses.field(default=False)

    # Automatic attributes
    modules: dict = dataclasses.field(default_factory=lambda: {})
    _file: str = dataclasses.field(init=False)
    logger: logging.Logger = dataclasses.field(init=False)
    port: int = dataclasses.field(init=False)
    _connect: int = dataclasses.field(init=False)

    def __post_init__(self) -> None:
        """Initiation method to load the user's DHTK settings and confirm object types are correct"""

        # Convert working directory to pathlib.Path and create required folders
        if isinstance(self.wd, str):
            self.wd = pathlib.Path(self.wd).expanduser() / self.user
        core.make_dirs([self.wd / "logs", self.wd / "requests"])
        os.chdir(str(self.wd))

        # Set up configuration file
        self._file = self.wd / f"{self.user}.config"

        # Set/retrieve configurations
        self._set_logger()
        self._load()
        self.save()  # Save any user defined settings

        self.logger.info("SETTINGS: DHTK settings instantiated")

    def save(self) -> None:
        """Method to write a DHTK configurations to disk as a pickled dictionary."""
        # Log call
        self.logger.debug("SETTINGS: Settings.save method was called")

        # Convert object to dictionary and save a pickled version to disk
        configs = dataclasses.asdict(self)

        with open(self._file, 'wb') as pickled_file:
            pickle.dump(configs, pickled_file, protocol=pickle.HIGHEST_PROTOCOL)
        pickled_file.close()

        self.logger.info(f"SETTINGS: DHTK settings saved to disk:\n{str(self)}")

    def _load(self) -> None:
        """Method to load user's DHTK configurations from if available."""
        self.logger.debug("SETTINGS: Settings._load method was called")

        file = pathlib.Path(self._file)

        if file.is_file():  # Check if a settings file exist for user
            with open(self._file, 'rb') as pickled_file:
                configs = pickle.load(pickled_file)
            pickled_file.close()
        else:
            self.logger.info(f"SETTINGS: No setting found for user. Settings file created to {self._file}")
            configs = {}

        # Initiating automatic settings
        self.modules = configs.get("modules", self.modules)
        self._connect = configs.get("_connect", 30)
        self.port = configs.get("port", 3030)

        # Checking main settings
        if self.endpoint is None:
            self.endpoint = configs.get("client", "localhost")
        if self.dataset is None:
            self.dataset = configs.get("dataset") or ""

            if self.dataset == "":
                warnings.warn("NO dataset SELECTED!")
                self.logger.warning(f"SETTINGS: No dataset has been selected!")

        self.logger.info(f"SETTINGS: Settings loaded from file")

    def _set_logger(self) -> None:
        """Method to set up the logger for DHTK use.
        It automatically organises logs in the DHTK working directory
        per user date and session initiated
        """

        # Check if there is a DHTK logger already
        if logging.Logger.manager.loggerDict.get("dhtk") is None:
            # Retrieve date to set up logs' directory'
            date = datetime.datetime.now()
            date = date.date()
            date = date.strftime("%Y_%b_%d")

            log_dir = self.wd / "logs" / date
            core.make_dirs(log_dir)

            # Determine the session number for log numbering
            session = [int(re.sub(".log", "", file.name).split("_")[-1]) for file in log_dir.iterdir()]
            session = max(session + [0]) + 1
            log_file = log_dir / f"log_{session:02d}.log"

            # Create logger
            log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            logging.basicConfig(format=log_format,
                                datefmt='%m/%d/%Y %I:%M:%S %p',
                                filename=log_file,
                                level=logging.DEBUG)
            self.logger = logging.getLogger("dhtk")

            print(f"DHTK logs saved to {log_file}")
            self.logger.info(f"SETTINGS: DHTK logger initiated to {log_file}")
        else:
            self.logger = logging.getLogger("dhtk")
            self.logger.debug(f"SETTINGS: DHTK logger session already initiated!")

    def __str__(self) -> str:
        """DHTK's settings representation"""

        configs = dataclasses.asdict(self)
        configs = [f"[{key}]: {value}" for key, value in configs.items()]

        return "\n".join(configs)
