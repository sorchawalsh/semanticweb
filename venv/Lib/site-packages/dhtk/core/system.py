"""Utility functions used by all modules."""

import os
import sys
import datetime
import typing
import requests
import tqdm
import pathlib
import logging
import warnings
import platform

warnings.formatwarning = lambda message, *args: f"{message}\n"


def get_platform():
    return '"(%s; U; %s; en-us)"' % (platform.system(), platform.architecture()[0])


def make_dirs(directories: typing.Union[str, typing.List[str]]) -> None:
    """Function to create new directories at DHTK's initiation.

    Parameters
    ----------
    directories: a string or list of strings and/or pathlib.Path objects
        Path to directories to create on the local system
    """

    from pathlib import Path

    # Convert values to list
    if not isinstance(directories, list):
        directories = [directories]

    # For each directory, confirm value is a pathlib.Path object and directory doesn't exist
    for directory in directories:
        directory = Path(directory)

        if not directory.is_dir():
            try:
                directory.mkdir(parents=True, exist_ok=True)
            except (IOError, PermissionError):
                sys.exit(f"Could not create {directory}, please check user rights.")


def url_exists(url: str):
    """Function to check if an URL is available.

    Parameters
    ----------
    url: string
        URL to validate

    Returns
    -------
    A boolean value indication if the URL provided is valid
    """

    # If the URL is a local file
    if url.startswith("file:"):
        return os.path.exists("/" + url.split("/", 1)[1])

    # If URL is a remote file
    try:
        response = requests.head(url)
    except requests.exceptions.ConnectionError:
        return False
    return response.ok


def download_files(urls: typing.Union[str, typing.List[str]], path: str = "./", name: str = "files") -> \
        typing.Union[str, typing.List[str]]:
    """Function to download files from the Web.
    Parameters
    ----------
    urls: string of list of strings
        URLs of the files to be downloaded
    path: string [default: "./"]
        Path to directory to store the downloaded files.
    name: string [default: "files"]
        Description of the files to be downloaded

    Returns
    -------
    Names for all the files downloaded
    """

    # Convert inputs to list
    if isinstance(urls, str):
        urls = [urls]

    path = pathlib.Path(path)
    make_dirs(path)

    # Get DHTK logger
    logger = logging.getLogger("dhtk")

    # Request all files
    file_names = []
    for url in urls:

        if url_exists(url):  # Check if URL is valid
            filename = url.split('/')[-1]
            filename = filename.split('?')[0]
            file_names.append(filename)

            # Make request
            headers = {'User-Agent': '%s' % get_platform()}
            with requests.get(url, stream=True, headers=headers) as r:
                r.raise_for_status()
                chunk = 8192
                total = int(r.headers['Content-Length'])

                # Read to file
                with open(filename, 'wb') as f:
                    progress_bar = tqdm.tqdm(total=total, desc=f"Downloading {name}")
                    for part in r.iter_content(chunk_size=chunk):
                        f.write(part)
                        progress_bar.update(chunk)
                    f.close()
                    progress_bar.close()
                r.close()
                logger.info(f"DOWNLOAD: {filename} downloaded from {url}")
        else:  # Warn if URL is not valid
            msg = f"URL not available: {url}"
            warnings.warn(msg)
            logger.warning(f"DOWNLOAD: {msg}")

    if len(file_names) == 1:  # Return a string if there is only one file
        file_names = file_names[0]

    return file_names


def get_date(url: str) -> datetime.datetime:
    """Function to get last modified date of a remote file"""

    headers = {'User-Agent': '%s' % get_platform()}
    r = requests.head(url, stream=True, headers=headers)
    r = r.headers['last-modified']
    last_update = datetime.datetime.strptime(r, '%a, %d %b %Y %H:%M:%S %Z')

    return last_update
