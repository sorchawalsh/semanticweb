import sys
from pathlib import Path
import pandas as pd
from time import sleep
from dhtk.extensions.templates.corpus import Corpus

class GutenbergCorpus(Corpus):
    """
    Create a corpus form books of type `dhtk.common.Book.`

    Notes
    -----
    The corpus can be created by a list of books.
    The list of books can be gotten by applying different filters,
    like searching a list of books by:

        - subject :class:`Data.search_by_subject()`,
        - author :class:`Data.search_by_author()`,
        - titre :class:`Data.search_by_title()`,
        - bookshelves :class:`Data.search_by_bookshelves()`.

    Corpus has a name, description, a path to save and a list of selective books.

    A single book or even a list of books can be added to the corpus created.
    It is also possible to remove a book or all the books from corpus.

    Download a single book or the whole books of the corpus in a local machine
    can be also done by this class.

    Example
    -------
    ::

        import os
        from pprint import pprint

        from dhtk.extensions.templates.corpus import Corpus
        from dhtk.catalogs.gutenberg.search import GutenbergData

        # Initialise class GutenbergData as gutenberg_search.
        gutenberg_search = GutenbergData()

        # Data the books by bookshelf and store the id of books in the list
        books_found = gutenberg_search.search_by_author("Jane","Austen")
        book_ids = [item['book_id'] for item in books_found]

        books = set()
        # Get only the 4 first books found.
        for book_id in book_ids[0:4]:
            books.add(gutenberg_search.book_from_book_id(book_id))

        # Create the corpus.
        corpus = Corpus(
            "jane_austen",
            description="Books by Jane Austen",
            corpora_path=os.path.expanduser("~/Desktop/"),
            book_list=books
        )
        corpus.print_book_list()
        # 0 Jane Austen Emma
        # 1 Jane Austen Gevoel en verstand
        # 2 Jane Austen Emma
        # 3 Jane Austen Lady Susan
    """

    # TODO: convertors: metadata -> sqllite | texts -" directory

    def __init__(self, name, settings, description="", corpora_path=None, book_list=None):
        """

        Parameters
        ----------
        name: str
            Name of the corpus.
        description: str
            A description of the corpus.
        corpora_path: str
            Path where the texts of the books in the corpus are saved.
        book_list: list(dhtk.common.book.Book)
            A list of common.book.Book and/or child tools of it.
        """
        self._name = name
        self._description = description
        self.CONFIGS = settings

        # If there is a list of books, add the book to the list.
        if book_list:
            self._book_list = [book for book in book_list if book]
        # If  no list, create one (creating a set in order to avoid duplication).
        else:
            self._book_list = set()

        # If any path exist, ask for a directory and create one.
        self._corpora_path = corpora_path
        if not corpora_path:
            self.path(self.CONFIGS.wd / "requests")


    # Settings
    def path(self, path=None):
        """
        Return the path containing the text files of the books in the corpus.

        Returns
        -------
        return: str
            Path of corpus with the name of directory and the name of corpus.

        Example
        -------
        ::

            corpus.get_corpus_path()
            # '~Desktop/jane_austen'

        """
        if path is not None:
            self._corpora_path = path
        name = self._name.split()
        return self._corpora_path / "_".join(name)

    def name(self, name=None):
        """
        Return the name of the corpus.

        Returns
        -------
        name: str
            The corpus file will be saved in the local machine with this name.

        Example
        -------
        ::

            corpus.get_name()
            # 'jane_austen'

        """
        if name is not None:
            self._name = name

        return self._name

    def description(self, description=None):
        """
        Return the description of the corpus.

        Returns
        -------
        description : str
            The description of the corpus

        Example
        -------
        ::

            corpus.get_description()
            # 'Books by Jane Austen'

        """
        if description is not None:
            self._description = description
        return self._description

    # Books
    def books(self, get=False, remove=False):
        """
        Return the list of books in the corpus.

        Print list of books in the corpus.

        This list containing the number of books in corpus, authors's full name and the books title.

        Returns
        -------
        book_list: list(dhtk.common.book.Book)
            Books in the corpus

        Example
        -------
        ::

            pprint(corpus.get_book_list())
            # [<GutenbergBook: Jane Austen - Emma gutenberg_id: 158>,
            # <GutenbergBook: Jane Austen - Gevoel en verstand gutenberg_id: 25946>,
            # <GutenbergBook: Jane Austen - Emma gutenberg_id: 19839>,
            #  <GutenbergBook: Jane Austen - Lady Susan gutenberg_id: 22953>]
        """
        if get:
            books = {f"{book.get_title()[:20]} ({book.get_book_id_number()})": book for book in self._book_list
                     if book and (get == book.get_title() or # Full title
                                  get == f"{book.get_title()[:20]} ({book.get_book_id_number()})" or # Short title
                                  get == "all")} # Accept all
            if remove:
                for book in books.values():
                    self.remove_book(book)
            else:
                if len(books) == 1:
                    books = list(books.values())[0]
                return books
        else:
            for index, book in enumerate(self._book_list):
                author = book.get_author()
                author_full_name = author.get_full_name()
                book_title = book.get_title()
                print("{} {} {}".format(index, author_full_name, book_title))

    def add_book(self, book):
        """
        Add a single book to the corpus.

        Parameters
        ----------
        book: dhtk.common.book.Book
            The book from searching in gutenberg and get book id using
            the method `book_from_book_id()` from :class: `GutenbergData`.

        Example
        -------
        Get a single book by gutenberg id.
        ::

            len(corpus)
            # 4
            book = gutenberg_search.book_from_book_id(book_ids[5])
            corpus.add_book(book)
            len(corpus)
            # 5


        """
        # If the object is a book, add it to the corpus that already exist.
        if book and book not in self._book_list:
            self._book_list.add(book)

        # if the object is not a book, send an error.
        # else:
        #     LOGGER.error("This is not a book.")

    def add_books(self, book_list):
        """
        Add a list of books to the corpus.

        Parameters
        ----------
        book_list: list(dhtk.common.book.Book)
            A list of books form book id.
            This list can get form searching in gutenberg and
            and get the list of books id  using the method `book_from_book_id()`
            from :class: `GutenbergData`
            in order to add to the corpus that already exist.
            Each book of in the new list will be added by the method of `add_book()`

        Example
        -------
        ::

            len(corpus)
            # 5
            books = [gutenberg_search.book_from_book_id(book_id) for book_id in book_ids[6:10]]
            corpus.add_books(books)
            len(corpus)
            # 9

        """
        for book in book_list:
            self.add_book(book)

    @staticmethod
    def get_book_file_name(book):
        """
        Return a good filename for a book.

        Parameters
        ----------
        book: dhtk.common.book.Book
            It is the book from searching in gutenberg
            and get book id using the method `book_from_book_id()`.

        Returns
        -------
        book_name: str
            This method return to the method in Book of type `dhtk.common.book` which get the name
            of author and the titre of the book, separate each word by adding '_' to create
            a filename of a single book. Or the id of the book followed by the name of its source.
            At the end of book's filename, the suffix of .txt
            will be also added.

        Example
        -------
        ::

            corpus.get_text_file_name(corpus[1])
            # '25946-gutenberg.txt'

        """
        return book.get_text_file_name()

    def remove_book(self, book):
        """
        Delete a book form the corpus by deleting the book form list of books and also the file of
        book in the local
        machine.

        Parameters
        ----------
        book: dhtk.common.book.Book
            The book to remove from the corpus

        Example
        -------
        ::

            corpus.print_book_list()
            # 0 Jane Austen Emma
            # 1 Jane Austen Gevoel en verstand
            # 2 Jane Austen Emma
            # 3 Jane Austen Lady Susan
            # 4 Jane Austen Love and Freindship [sic]
            # 5 Jane Austen Love and Freindship [sic]
            # 6 Jane Austen Mansfield Park
            # 7 Jane Austen Mansfield Park
            # 8 Jane Austen Northanger Abbey
            corpus.remove_book(corpus[6])
            corpus.remove_book(corpus[5])
            corpus.remove_book(corpus[2])

        """
        self._book_list.remove(book)
        file_path = self.path() / self.get_book_file_name(book)
        if file_path.is_file():
            file_path.unlink()

    def clear(self):
        """
        Delete all files and books in the corpus.
        """
        folder = self.path()

        if folder.is_dir():
            for content in folder.iterdir():
                content.unlink()
            folder.rmdir()

        self._book_list.clear()

    def download_book(self, book):
        """
        Download the text file for a single book.

        Parameters
        ----------
        book: dhtk.common.book.Book

        Example
        -------
        ::

            corpus.download_book(corpus[0])
            pprint(os.listdir(corpus.get_corpus_path()))
            # ['158-gutenberg.txt']

        """

        corpus_path = self.path()
        if not corpus_path.is_dir():
            self.CONFIGS.make_dirs(corpus_path)
        filename = book.get_text_file_name()
        path = corpus_path / filename

        if not path.is_file():
            book.repository().save_clean_text_file_to(corpus_path)
            sleep(5)
        # else:
        #     LOGGER.info("File %s already exists in %s.", filename, corpus_path)

    def download_corpus(self):
        """
        Download the text files for the full corpus to the corpus path directory.

        Example
        -------
        ::

            corpus.download_book_corpus()
            pprint(os.listdir(corpus.get_corpus_path()))
            # ['158-gutenberg.txt',
            #  '19839-gutenberg.txt',
            # '121-gutenberg.txt',
            # '22954-gutenberg.txt',
            # '1212-gutenberg.txt',
            # '25946-gutenberg.txt',
            # '22962-gutenberg.txt',
            # '22953-gutenberg.txt']

        """
        # Save the original text of books

        for book in self._book_list:
            self.download_book(book)

    def download_metadata(self):
        """
        Download the text files for the full corpus to the corpus path directory.

        Example
        -------
        ::

            corpus.download_book_corpus()
            pprint(os.listdir(corpus.get_corpus_path()))
            # ['158-gutenberg.txt',
            #  '19839-gutenberg.txt',
            # '121-gutenberg.txt',
            # '22954-gutenberg.txt',
            # '1212-gutenberg.txt',
            # '25946-gutenberg.txt',
            # '22962-gutenberg.txt',
            # '22953-gutenberg.txt']

        """
        # Save the original text of books

        corpus_path = self.path()
        if not corpus_path.is_dir():
            self.CONFIGS.make_dirs(corpus_path)

        # Save book metadata
        pandas_table = self.to_pandas_dataframe()
        pandas_table.to_csv(path_or_buf=corpus_path / "books_metadata.csv", index=False)

        # Save author metadata
        authors = set()
        for book in self._book_list:
            authors.add(book.get_author())
        authors_meta = {}
        for author in authors:
            authors_meta[author.get_full_name()] = author.to_dict()

        panda_author = pd.DataFrame.from_dict(authors_meta, orient="index")
        names = panda_author["name"]
        panda_author.drop(columns="name", inplace=True)
        panda_author.insert(0, 'name', names)
        panda_author.to_csv(path_or_buf=corpus_path / "authors_metadata.csv", index=False)

    def to_dict(self):
        """
        Convert to python dict for general purpose.

        Returns
        -------
        corpus_dict: dict
            A python dictionary containing the metadata of the books in the corpus.

        Example
        -------
        ::

            pprint(corpus.to_dict())
            # {0: {'author_aliases': {'Αριστοφάνης', 'Ἀριστοφάνης'},
            #     'author_birth_date': '1873',
            #     'author_death_date': '1924',
            #     'author_gutenberg_aliases': {'Αριστοφάνης', 'Ἀριστοφάνης'},
            #     'author_gutenberg_id': 'http://www.gutenberg.org/2009/agents/965',
            #     'book_gutenberg_id': 'http://www.gutenberg.org/ebooks/2571',
            #     'book_title': 'Peace'
            #     ...},
            # 1: {'author_aliases': set(),
            #     'author_birth_date': '-450',
            #     'author_death_date': '-388',
            #     'author_first_name': 'John',
            #     'author_gutenberg_aliases': set(),
            #     'author_gutenberg_id': 'http://www.gutenberg.org/2009/agents/979',
            #     'book_title': 'The Bicyclers and Three Other Farces'
            #     ...},
            # ...
            # }
        """
        corpus_dict = dict()
        for index, book in enumerate(self._book_list):
            book_dict = book.to_dict()
            filename = book.get_text_file_name()
            file_path = self.path() / filename
            if file_path.is_file():
                book_dict["text_file_path"] = file_path
            corpus_dict[index] = book_dict
        return corpus_dict

    def to_pandas_dataframe(self):
        """
        Convert the list of books into a pandas.DataFrame.

        Returns
        -------
        book_dataframe : pandas.DataFrame

        Example
        -------
        ::

            corpus.to_pandas_dataframe()
            #  author_aliases  ...                                     text_file_path
            # 0             {}  ...  /home/megloff1/Desktop/jane_austen/158-gutenbe...
            # 1             {}  ...  /home/megloff1/Desktop/jane_austen/25946-guten...
            # 2             {}  ...  /home/megloff1/Desktop/jane_austen/19839-guten...
            # 3             {}  ...  /home/megloff1/Desktop/jane_austen/22953-guten...
            # 4             {}  ...  /home/megloff1/Desktop/jane_austen/1212-gutenb...
            # 5             {}  ...  /home/megloff1/Desktop/jane_austen/22954-guten...
            # 6             {}  ...  /home/megloff1/Desktop/jane_austen/22962-guten...
            # 7             {}  ...  /home/megloff1/Desktop/jane_austen/121-gutenbe...
            # [8 rows x 15 columns]

        """
        import pandas as pd

        book_list = list()
        for book in self._book_list:
            book_dict = book.to_dict()
            filename = book.get_text_file_name()
            file_path = self.path() / filename
            if file_path.is_file():
                book_dict["text_file_path"] = file_path
            book_list.append(book_dict)
        return pd.DataFrame.from_dict(book_list)

    def __iter__(self):
        """
        Add capability to iterate over books in corpus.

        Returns
        -------
        iterator: iter
            An iterator over the books in the corpuse's booklist.
        """
        for book in self._book_list:
            yield book

    def __len__(self):

        """
        List length.

        Returns
        -------
        len: int
            The number of books in the corpus.
        """
        return len(self._book_list)

    def __repr__(self):
        """
        Convert book_list in string format.

        Returns
        -------
        corpus_str : str
            A string of books in the list with information like the number of book in the
            list, author's name and the titre of book.

        """
        # Add padding to the authors'name in order to have a clean string
        max_author_name_len = max([
            len(book.get_author().get_full_name()) for book in self._book_list
        ]) + 4
        format_string = "{}\t{:" + str(max_author_name_len) + "}\t{}"

        text = [f"Corpus name:\n\t{self.name()}",
                f"Corpus description:\n\t{self.description()}",
                f"Corpus path:\n\t{self.path()}",
                "Corpus books:"]
        text += [format_string.format(
                i, book.get_author().get_full_name(), book.get_title()
            ) for i, book in enumerate(self._book_list)]

        return "\n".join(text)

    def __getitem__(self, item):
        """
        Return the item requested.

        Parameters
        ----------
        item : int
            The index of the book in the corpus

        Returns
        -------

        """
        return self._book_list[item]
