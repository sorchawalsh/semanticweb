

"""Module contains the abstract Author class."""

from nameparser import HumanName

class Author:
    """
    The class for a generic author.

    An Author is defined by his name and by various metadata,
    which may contain his birth date, biography or bibliography.

    This class should be parent to all authors used with the dhtk library.

    Notes
    -----
    This is the basic Author class, it serves as parent class for all Author
    classes found in the catalogs (for example:
    dhtk.catalogs.gutenberg.author.GutenbergAuthor).

    Example
    -------
    Model example to be used for further uses in the class.
    ::

        from pprint import pprint

        from nameparser import HumanName

        from dhtk.templates.author import Author

        charles_dickens_author = Author(
            HumanName("Charles John Huffam Dickens"),
            metadata=dict(),
            birth_date="07/02/1812",
            death_date="09/06/1870",
            biography=\
                "Charles John Huffam Dickens (/ˈdɪkɪnz/; 7 February 1812 – 9 June 1870) was an " \
                "English writer and social critic. He created some of the world's best-known " \
                "fictional characters and is regarded by many as the greatest novelist of the" \
                "Victorian era. His works enjoyed unprecedented popularity during his lifetime, " \
                "and by the 20th century critics and scholars had recognised him as a literary " \
                "genius. His novels and short stories are still widely read today.",
            bibliography=[
                "Great Expectations",
                "Oliver Twist",
                "David Copperfield",
                "Bleak House ",
            ],
            same_as={
                'http://dbpedia.org/page/Charles_Dickens': 'User',
                'https://viaf.org/viaf/88666393/': 'User'
            }
        )

    """
    metadata = dict()

    def __init__(
            self,
            name,
            metadata=None,
            same_as=None,
            **kwargs
    ):
        """
        The init function of the Author class.

        Parameters
        ----------
        name: nameparser.HumanName || str
            The name of the author as nameparser.HumanName object or a string.
        metadata: dict
            A dictionary containing the metadata.
        kwargs:
            Any other information.
        """

        if isinstance(name, str):
            name = HumanName(name)

        if not isinstance(name, HumanName):
            raise ValueError("Name is not an instance of nameparser.HumanName")

        self.name = name

        if metadata is None:
            metadata = dict()

        if kwargs is not None:
            for key, value in kwargs.items():
                self.metadata[key] = value

        self.metadata = {**self.metadata, **metadata}

        if isinstance(same_as, dict):
            self.same_as = same_as
        else:
            self.same_as = dict()

    def update_metadata(self, metadata):
        """
        Merge old metadata with new metadata.

        Parameters
        ----------
        metadata: dict
            can include:
                - number of pages
                - editor
                - publisher
                - first edition date
        """
        self.metadata.update(metadata)

    def get_full_name(self):
        """
        Get author's full name.

        Returns
        -------
        full_name: str
            The author's full name.
        Example
        -------
        ::

            print(charles_dickens_author.get_full_name())
            # Charles John Huffam Dickens


        """
        return str(self.name)

    def get_first_name(self):
        """
        Get author's first name.

        Returns
        -------
        first_name: str
            The author's first name.

        Example
        -------
        we pick the author Charles John Huffam Dickens and get_first_name returns str "Charles"
        ::

            print(charles_dickens_author.get_first_name())
            # Charles
        """
        return self.name.first

    def get_middle_name(self):
        """
        Get author's middle name.

        Returns
        -------
        middle_name: str
            The author's middle name.

        Example
        -------
        we pick the author Charles John Huffam Dickens and get_middle_name returns str "John Huffam"
        ::

            print(charles_dickens_author.get_middle_name())
            # John Huffam
        """
        return self.name.middle

    def get_last_name(self):
        """
        Get author's last name.

        Returns
        -------
        last_name: str
            The author's last name.

        Example
        -------
        we pick the author Charles John Huffam Dickens and get_last_name returns str "Dickens"
        ::

            print(charles_dickens_author.get_last_name())
            # Dickens
        """
        return self.name.last

    def get_birth_date(self):
        """
        Get author's birth date.

        Returns
        -------
        birth_date: str
            The author's birth date.

        Example
        -------
        we pick the author Charles John Huffam Dickens and get_birth_date returns str "07/02/1812"
        ::

            print(charles_dickens_author.get_birth_date())
            # 07/02/1812
        """
        return self.metadata.get("birth_date", "")

    def get_death_date(self):
        """
        Get author's death date.

        Returns
        -------
        death_date: str
            The author's death date.

        Example
        -------
        we pick the author Charles John Huffam Dickens and get_birth_date returns str "07/02/1812"
        ::

            print(charles_dickens_author.get_death_date())
            09/06/1870
        """
        return self.metadata.get("death_date", "")

    def get_biography(self):
        """
        Get author's biography.

        Returns
        -------
        bigraphy: str
            The author's biography.

        Example
        -------
        ::

            print(charles_dickens_author.get_biography())
            # Charles John Huffam Dickens (/ˈdɪkɪnz/; 7 February 1812 – 9 June 1870) was an
            # English writer and social critic. He created some of the world's best-known
            # fictional characters and is regarded by many as the greatest novelist of the
            # Victorian era. His works enjoyed unprecedented popularity during his lifetime,
            # and by the 20th century critics and scholars had recognised him as a literary
            # genius. His novels and short stories are still widely read today.


        """
        return self.metadata.get("biography", "")

    def get_bibliography(self):
        """
        Get author's bibliography.

        Returns
        -------
        bibliography: str
            The author's bibliography.
        Example
        -------
        ::

            print(charles_dickens_author.get_bibliography())
            # ['Great Expectations', 'Oliver Twist', 'David Copperfield', 'Bleak House ']

        """
        return self.metadata.get("bibliography", "")

    def get_same_as(self):
        """
        Return gathered metadata.

        Returns
        -------
        same_as: dict
            The key is the uri of the same_as
            The value is the name of the source of the uri.

        Example
        -------
        ::

            print(charles_dickens_author.get_bibliography())
            # {
                'http://dbpedia.org/page/Charles_Dickens': 'User',
                'https://viaf.org/viaf/88666393/': 'User'
              }
        """
        return self.same_as


    def print_info(self):
        """
        Print information about the author.


        Example
        -------
        print_info of Charles Dickens infos returns a print with his names, birth date,
        biography and bibliography.
        ::

            charles_dickens_author.print_info()
            # Charles John Huffam Dickens
            # Metadata    :
            #     - birth_date  :   07/02/1812
            #     - death_date  :   09/06/1870
            #     - biography   : Charles John Huffam Dickens (/ˈdɪkɪnz/; 7 February 1812 – ...
            #     - bibliography:
            #             - Great Expectations
            #             - Oliver Twist
            #             - David Copperfield
            #             - Bleak House
            #     - name        : Charles John Huffam Dickens
            #     - first_name  :      Charles
            #     - middle_name :  John Huffam
            #     - last_name   :      Dickens

        """
        print(self.get_full_name())
        print("{:12}:".format("Metadata"))
        for key, value in self.metadata.items():
            if isinstance(value, str):
                print(4 * " " + "- {:12}: {:>12}".format(key, value))
            elif isinstance(value, dict):
                print(4 * " " + "- {:12}:".format(key))
                for entry in value.values():
                    print(12 * " " + "- {}".format(entry))
            else:
                print(4 * " " + "- {:12}:".format(key))
                for entry in value:
                    print(12 * " " + "- {}".format(entry))

    def to_dict(self):
        """
        Convert to python dict for general purpose.

        Returns
        -------
        author_as_dict: dict
            A dictionary version of the Author's data.

        Example
        -------
        ::

            pprint(charles_dickens_author.to_dict())
            # {'bibliography': ['Great Expectations',
            #                    'Oliver Twist',
            #                    'David Copperfield',
            #                    'Bleak House '],
            #   'biography': 'Charles John Huffam Dickens (/ˈdɪkɪnz/; 7 February 1812 – 9 '
            #                'June 1870) was an English writer and social critic. He created '
            #                "some of the world's best-known fictional characters and is "
            #                'regarded by many as the greatest novelist of theVictorian era. '
            #                'His works enjoyed unprecedented popularity during his '
            #                'lifetime, and by the 20th century critics and scholars had '
            #                'recognised him as a literary genius. His novels and short '
            #                'stories are still widely read today.',
            #   'birth_date': '07/02/1812',
            #   'death_date': '09/06/1870',
            #   'first_name': 'Charles',
            #   'last_name': 'Dickens',
            #   'middle_name': 'John Huffam',
            #   'name': 'Charles John Huffam Dickens'}

        """
        author_dict = dict()
        for key, value in self.metadata.items():
            if isinstance(value, set):
                value = list(value)
            author_dict["metadata_"+key] = value

        author_dict["name"] = self.get_full_name()
        author_dict["first_name"] = self.get_first_name()
        author_dict["middle_name"] = self.get_middle_name()
        author_dict["last_name"] = self.get_last_name()
        return author_dict

    def to_pandas_dataframe(self):
        """
        Convert the author's information into a pandas.DataFrame.

        Returns
        -------
        pandas_dataframe: pandas.DataFrame

        Example
        -------
        ::

            import pandas as pd
            charles_dickens_author.to_pandas_dataframe()

            #                                        bibliography  ...                         name
            # 0  [Great Expectations, Oliver Twist, David Coppe...  ...  Charles John Huffam Dickens

        """
        import pandas as pd
        return pd.DataFrame.from_dict([self.to_dict()])

    def __eq__(self, other):
        """
        Equality function between authors.

        Test with a bool if two objects are equal in every aspect or not.

        Parameters
        ----------
        other: dhtk.templates.author.Author
            Another object of type Author.


        """
        return self.get_first_name() == other.get_first_name() and \
            self.get_last_name() == other.get_last_name() and \
            self.get_birth_date() == other.get_birth_date()

    def __ne__(self, other):
        """
        Inequality function between authors.

        Test with a bool if two author instances are different in at
        least one aspect.

        Parameters
        ----------
        other: dhtk.templates.author.Author
            Another object of type Author.

        """
        return not self.__eq__(other)

    def __hash__(self):
        """
        Return hash for the author.

        Returns
        -------
        hash: int

        """
        return hash(self.name.first + self.name.last + self.get_birth_date())

    def __repr__(self):
        """

        Returns
        -------
        object_str : str
            String representing the object
        """
        if self is not None:
            return "<Author: %s>" % (self.get_full_name())
        return "<dhtk.templates.author.Author>"
