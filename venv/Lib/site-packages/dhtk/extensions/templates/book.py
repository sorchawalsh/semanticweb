

"""Contains the class describing a dhtk book."""

import pickle
# TODO: adapt: from dhtk import LOGGER
from dhtk.extensions.templates.author import Author


class Book:
    """
    The general book class of dhtk.

    Books implemented in submodules of dhtk should have this class as parent.

    Example
    -------
    ::

        from pprint import pprint

        from dhtk.templates.book import Book

        mrs_dalloway_book = Book(
            "Mrs Dalloway",
            "Virginia Woolf",
            metadata = {
                "publisher": "Hogarth Press",
                "published": "14 May 1925",
                "first_edition_date": "14 May 1925",
                "country": "United Kingdom",
            },
            language="English",
            ISBN="0-15-662870-8",
            same_as={"http://dbpedia.org/page/Mrs_Dalloway": "User"}
        )

    """
    metadata = dict()
    same_as = dict()
    get_repository = None

    def __init__(
            self,
            title,
            author="Anonymous",
            metadata=None,
            same_as=None,
            **kwargs
    ):
        """
        Init function of a Book.
        ------------------------

        Parameters
        ----------
        author: dhtk.templates.author.Author || str
            The author of the book.
        title: str
            required, the book's title
        metadata: dict
            Contains all found metadata relative to the book.
            can include:

                - number of pages
                - editor
                - publisher
                - first edition date
        same_as: dict
            The key is the uri of the same_as
            The value is the name of the source of the uri.

        Returns
        -------
        book: dhtk.templates.book.Book
            A Book object
        """

        # TODO: adapt: LOGGER.debug("Book init args %s", (title, author, metadata, same_as, kwargs))

        if metadata is None:
            metadata = dict()

        if same_as is None:
            same_as = dict()

        if isinstance(author, Author):
            self._author = author
        elif isinstance(author, str):
            self._author = Author(author)
        else:
            self._author = Author("Anonymous")

        if isinstance(metadata, dict):
            self.metadata = metadata
        else:
            self.metadata = dict()

        if isinstance(same_as, dict):
            self.same_as = same_as
        else:
            self.same_as = dict()

        if title:
            self._title = title
        else:
             # TODO: adapt: LOGGER.error("A book needs a title!")
            raise ValueError("A book needs a title.")

        # get data from kwargs
        if kwargs is not None:
            for key, value in kwargs.items():
                self.metadata[key] = value

        self.metadata = {**self.metadata, **metadata}

    def get_author(self):
        """
        Returns the book's author from Book

        Returns
        -------
        author: dhtk.templates.author.Author
            an instance of Author in dhtk.templates.author

        Example
        -------
        ::

            mrs_dalloway_book.get_author()
            # <Author: Virginia Woolf>
        """
        return self._author

    def get_title(self):
        """
        Return the book's title from Book

        Returns
        -------
        title: str
            The title of the book from self._title

        Example
        -------
        ::

            mrs_dalloway_book.get_title()
            # 'Mrs Dalloway'
        """
        return self._title

    def get_editor(self):
        """
        Return the book's editor.

        The value corresponding to the key "editor" in dict metadata for Book

        Returns
        -------
        editor: str
            The editor of the book
        """
        return self.metadata.get("editor", "")

    def get_publisher(self):
        """
        Returns the book's publisher.

        The value corresponding to the key "publisher" in dict metadata for Book

        Returns
        -------
        publisher: str
            The publisher of the book

        Example
        -------
        ::

            mrs_dalloway_book.get_publisher()
            # 'Hogarth Press'
        """
        return self.metadata.get("publisher", "")

    def get_first_edition_date(self):
        """
        Returns the first edition date of the book:
        value corresponding to the key "first_edition_date" in dict metadata for Book

        Returns
        -------
        first_edition_date: str

        Example
        -------
        ::

            mrs_dalloway_book.get_first_edition_date()
            # '14 May 1925'

        """
        return self.metadata.get("first_edition_date", "")

    def get_number_of_pages(self):
        """
        Return the number of pages of the book.

        Returns
        -------
        number_of_pages: int
        """
        return self.metadata.get("number_of_pages", -1)

    def update_metadata(self, metadata):
        """
        Merge old metadata with new metadata.

        Parameters
        ----------
        metadata: dict
            can include:
                - number of pages
                - editor
                - publisher
                - first edition date


        Example
        -------
        ::

            mrs_dalloway_book.update_metadata({"summary": '''
                This brilliant novel explores the hidden springs of thought and action in one day
                of a woman's life. Direct and vivid in her account of the details of Clarissa
                Dalloway's preparations for a party she is to give that evening, Woolf ultimately
                managed to reveal much more. For it is the feeling behind these daily events that
                gives Mrs. Dalloway its texture and richness and makes it so memorable.'''
            })

            pprint(mrs_dalloway_book.get_metadata())
            # {'ISBN': '0-15-662870-8',
            #  'country': 'United Kingdom',
            #  'first_edition_date': '14 May 1925',
            #  'language': 'English',
            #  'published': '14 May 1925',
            #  'publisher': 'Hogarth Press',
            #  'summary': '    This brilliant novel explores the hidden springs of thought '
            #             'and action in one day '
            #             "    of a woman's life. Direct and vivid in her account of the "
            #             'details of Clarissa '
            #             "    Dalloway's preparations for a party she is to give that "
            #             'evening, Woolf ultimately '
            #             '    managed to reveal much more. For it is the feeling behind '
            #             'these daily events that '
            #             '    gives Mrs. Dalloway its texture and richness and makes it so '
            #             'memorable.'}

        """
        self.metadata.update(metadata)

    def get_same_as(self):
        """
        Return gathered metadata.

        Returns
        -------
        same_as: dict
            The key is the uri of the same_as
            The value is the name of the source of the uri.

        Example
        -------
        ::

            pprint(mrs_dalloway_book.get_same_as())
            # {'http://dbpedia.org/page/Mrs_Dalloway': 'User'}
        """
        return self.same_as

    def get_metadata(self):
        """
        Return gathered metadata.

        Returns
        -------
        metadata: dict
            Book's metadata dictionary.

        Example
        -------
        ::

            pprint(mrs_dalloway_book.get_metadata())
            # {'ISBN': '0-15-662870-8',
            #  'country': 'United Kingdom',
            #  'first_edition_date': '14 May 1925',
            #  'language': 'English',
            #  'published': '14 May 1925',
            #  'publisher': 'Hogarth Press'}
        """
        return self.metadata

    def print_info(self):
        """
        Print information about the book.

        Example
        -------
        ::

            mrs_dalloway_book.print_info()
            # Title       : Mrs Dalloway
            # Author      : Virginia Woolf
            # Metadata    :
            #     - publisher   : Hogarth Press
            #     - published   :  14 May 1925
            #     - first_edition_date:  14 May 1925
            #     - country     : United Kingdom
            #     - language    :      English
            #     - ISBN        : 0-15-662870-8
            #     - summary     :
            #     This brilliant novel explores the hidden springs of thought and action in one day
            #     of a woman's life. Direct and vivid in her account of the details of Clarissa
            #     Dalloway's preparations for a party she is to give that evening, Woolf ultimately
            #     managed to reveal much more. For it is the feeling behind these daily events that
            #     gives Mrs. Dalloway its texture and richness and makes it so memorable.
        """
        print("{:12}: {}".format("Title", self._title))
        print("{:12}: {}".format("Author", self._author.get_full_name()))
        print("{:12}:".format("Metadata"))

        for key, value in self.metadata.items():
            if isinstance(value, str):
                print(4 * " " + "- {:12}: {:>12}".format(key, value))
            elif isinstance(value, dict):
                print(4 * " " + "- {:12}:".format(key))
                for entry in value.values():
                    print(12 * " " + "- {}".format(entry))
            else:
                print(4 * " " + "- {:12}:".format(key))
                for entry in value:
                    print(12 * " " + "- {}".format(entry))

    def to_dict(self):
        """
        Convert to python dict for general purpose.


        Returns
        -------
        book_as_dict: dict

        Example
        -------
        ::

            pprint(mrs_dalloway_book.to_dict())
            # {'author_first_name': 'Virginia',
            # 'author_last_name': 'Woolf',
            # 'author_middle_name': '',
            # 'author_name': 'Virginia Woolf',
            # 'bookISBN': '0-15-662870-8',
            # 'book_title': 'Mrs Dalloway',
            # 'book_country': 'United Kingdom',
            # 'book_first_edition_date': '14 May 1925',
            # 'book_language': 'English',
            # 'book_published': '14 May 1925',
            # 'book_publisher': 'Hogarth Press'}

        """

        book_dict = dict()
        book_dict["book_title"] = self._title
        for key, value in self._author.to_dict().items():
            book_dict["author_" + key] = value
        for key, value in self.metadata.items():
            if isinstance(value, set):
                value = list(value)
            book_dict["book_" + key] = value
        return book_dict

    def to_pandas_dataframe(self):
        """
        Convert the book's information into a pandas.DataFrame.

        Returns
        -------
        pandas_dataframe: pandas.DataFrame

        Example
        -------
        ::

            mrs_dalloway_book.to_pandas_dataframe()
            #  author_first_name author_last_name  ... book_published  book_publisher
            # 0          Virginia            Woolf  ...   14 May 1925  Hogarth Press

        """
        import pandas as pd
        return pd.DataFrame.from_dict([self.to_dict()])

    def get_text_file_name(self):
        """
        Return a good filename for a book.

        Returns
        -------
            file_name: str
                Example"Virginia_Woolf-Jacob's_Room.txt"

        Example
        -------
        ::

            mrs_dalloway_book.get_text_file_name()
            # 'Virginia_Woolf-Mrs_Dalloway.txt'

        """

        file_name = self.get_author().get_full_name() + "-" + self.get_title() + ".txt"
        return file_name.replace(" ", "_")

    def pickeled(self):
        """
        Return a pickled version of the book.

        Returns
        -------
        picke_dump: dhtk.templates.book.Book
            Serialised version of Book class instance
        """

        return pickle.dumps(self, -1)

    def __eq__(self, other):
        """
        Equality function.
        Ensures that two given books are not identical. Avoids redundancy.
        Compares author and title.

        Parameters
        ----------
        other: dhtk.templates.book.Book
             different book object from the book object calling the class.

        Return
        ------
            equal: bool
        """
        return self._author == other.get_author() and self._title == other.get_title()

    def __ne__(self, other):
        """
        Inequality function. Overrides __eq__. Is false if __eq__ is true and vice versa.

        Parameters
        ----------
        other: dhtk.templates.book.Book

        Return
        ------
            not_equal: bool
        """
        return not self.__eq__(other)

    def __hash__(self):
        """
        Returns hash of attributes of Book:
            - author from author.Author
                object
            - title
                str
            - first date (from metadata)
                date
        Allows dictionary keys to be compared quickly.

        Returns
        -------
            hash: int
        """
        return hash((self._author, self._title, self.get_first_edition_date()))

    def __repr__(self):
        """

        Returns
        -------
        object_str : str
            String representing the object
        """
        author = self.get_author()

        if isinstance(author, str):
            return "<Book: %s - %s>" % (author, self.get_title())

        return "<Book: %s - %s>" % (author.get_full_name(), self.get_title())
