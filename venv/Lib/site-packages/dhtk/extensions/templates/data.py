

"""Contains the Abstract Class Data."""

from abc import ABCMeta, abstractmethod


class Data(metaclass=ABCMeta):
    """
    Abstract method for search classes of the different catalog modules.

    This class should be used as parent for the classes implementing the search
    functions in submodules.
    """

    @abstractmethod
    def search_by_author(self, author_name, author_last_name):
        """
        Data books in a catalog by author's name and last name.

        Parameters
        ----------
        author_name : str
            Author's name or first name in plain text, case-insensitive.
            It can be a part of the author's name.
        author_last_name :str
            Author's last name in plain text, case-insensitive.
            It can be a part of the author's last name.

        Returns
        -------
        Book : dhtk.templates.book.Book
            An instance of the class Book

        """

        NotImplementedError(
            "Class %s doesn't implement search_by_author()" % self.__class__.__name__
        )

    @abstractmethod
    def search_by_title(self, title):
        """
        Data books by title.

        Parameters
        ----------
        title : str
            Title in plain text, case-insensitive. It can be a part of the title.

        Returns
        -------
        Book : dhtk.templates.book.Book
            An instance of the class Book

        """
        NotImplementedError(
            "Class %s doesn't implement search_by_title()" % self.__class__.__name__
        )

    # @abstractmethod
    # def search_by_title_and_author(self, title, author_name, author_last_name):
        """
        Data by title and by author's name and last name if given.

        Parameters
        ----------
        title : str
            Title in plain text, case-insensitive. It can be a part of the title.
        author_name : str
            Author's name or first name in plain text, case-insensitive.
            It can be a part of the author's name.
        author_last_name :str
            Author's last name in plain text, case-insensitive.
            It can be a part of the author's last name.


        Returns
        -------
        Book : dhtk.templates.book.Book
            An instance of the class Book
        """
        # NotImplementedError(
        #    "Class %s doesn't implement search_by_title_and_author()" % self.__class__.__name__
        # )

    @abstractmethod
    def get_metadata(self, item):
        """
        Get metadata about the book that is present in the catalog

        Parameters
        ----------
        item : dhtk.templates.book.Book || dhtk.templates.author.Author
            An instance of the class Book or Author

        Returns
        -------
        a dictionary of metadata

        """

        NotImplementedError(
            "Class %s doesn't implement get_metadata()" % self.__class__.__name__
        )


    # @abstractmethod
    # def get_metadata_uris_from_id(self, item_id):
        """
        Get metadata uris form the item_id.

        Parameters
        ----------
        item_id : str
            The id of the item.


        Returns
        -------
        same_as_list: list
            The list of owl:sameAs metadata URIs.
        """

        # NotImplementedError(
        #    "Class %s doesn't implement get_metadata()" % self.__class__.__name__
        # )
