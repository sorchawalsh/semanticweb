"""Contains the Abstract Class Metadata."""

import json
from urllib.request import urlopen
from urllib.parse import quote, unquote

from abc import ABCMeta, abstractmethod

# TODO: adapt: from dhtk import LOGGER
# logger = logging.getLogger("dhtk") shoudl do it :D


class Metadata(metaclass=ABCMeta):

    _base_url = ""
    _base_data_url = ""

    def get_base_url(self):
        """
        Return the base url of the metadata ressource.

        Returns
        -------
        URI : str
            Base url of the metadata ressource.

        """

        return self._base_url

    def get_base_data_url(self):
        """
        Return the base url of the metadata ressource.

        Returns
        -------
        URI : str
            Base url of the metadata ressource.

        """

        return self._base_data_url

    def get_authors_metadata_uri(self, author):
        """
        Return author's metadata URI.

        Parameters
        ----------
        author: dhtk.templates.author.Author

        Returns
        -------
        metadata_uri: str
            Authors metadata uri.
        """
        same_as = author.get_same_as()
        for uri in same_as.keys():
            if uri.startswith(self._base_url):
                return uri
        # TODO: adapt: LOGGER.info("metadata author uri not found.")
        return ""

    def get_author_metadata(self, author):
        """
        Return author's metadata.

        Parameters
        ----------
        author: dhtk.templates.author.Author

        Returns
        -------
        metadata: dict
            Authors metadata.
        """
        uri = self.get_authors_metadata_uri(author)
        if not uri:
            return dict()
        entity_id = self.uri_to_id(uri)
        return self.get_data(entity_id)

    def get_books_metadata_uri(self, book):
        """
        Return book's metadata URI.

        Parameters
        ----------
        book: dhtk.templates.book.Book
            an instance of Book in dhtk.templates.book
        author_uri: str

        Returns
        -------
            uri of book: str
        """
        same_as = book.get_same_as()
        for uri in same_as.keys():
            if uri.startswith(self._base_url):
                return uri
        # TODO: adapt: LOGGER.info("metadata book-uri not found.")

        return ""

    def get_book_metadata(self, book):
        """
        Return book's metadata.

        Parameters
        ----------
        book: dhtk.templates.book.Book

        Returns
        -------
        metadata: dict
            Authors metadata.
        """
        uri = self.get_books_metadata_uri(book)
        if not uri:
            return dict()
        entity_id = self.uri_to_id(uri)
        return self.get_data(entity_id)

    @abstractmethod
    def search_authors_metadata_uri(self, author):
        """
        Return author's metadata URI.

        Returns
        -------
        metadata_uri: str
            Authors metadata uri.
        """
        NotImplementedError(
            "Class %s doesn't implement search_by_author()" % self.__class__.__name__
        )

    @abstractmethod
    def search_books_metadata_uri(self, book):
        """
        Return book's metadata URI.

        Parameters
        ----------
        book: dhtk.templates.book.Book

        metadata_uri: str
            Books metadata uri.
        """
        NotImplementedError(
            "Class %s doesn't implement search_books_metadata_uri()" % self.__class__.__name__
        )

    @staticmethod
    @abstractmethod
    def get_possible_author_uri_list(author):
        """
        Return a set of names to identify the author.

        Parameters
        ----------
        author: dhtk.templates.author.Author

        Returns
        -------
        uris: set
            Set of uris.
        """
        NotImplementedError(
            "This Class doesn't implement get_possible_author_uri_list()"
        )

    @staticmethod
    @abstractmethod
    def get_possible_book_uri_list(book):
        """
        Return a set of titles to identify a book.

        Parameters
        ----------
        book: dhtk.templates.book.Book

        Returns
        -------
        uris: set
            Set of uris.
        """
        NotImplementedError(
            "This Class doesn't implement get_possible_book_uri_list()"
        )

    @staticmethod
    def uri_to_id(uri):
        """
        Convert an uri to the id of en entity.

        Parameters
        ----------
        uri: str
            The uri of an entity.

        Returns
        -------
        entity_id: str
            The id of the entity.
        """
        if uri.endswith("/"):
            uri = uri[:-1]
        return unquote(uri.rsplit("/", 1)[1])

    def get_data(self, entity_id):
        """
        Return the metadata.

        Parameters
        ----------
        entity_id: str
            The id of an entity.

        Returns
        -------

        data: dict
            A dictionary containing the data
        """
        url = self._base_data_url % (quote(entity_id, "/:_"), )
        try:
            r = urlopen(url)
            data = json.loads(r.read().decode(r.info().get_param('charset') or 'utf-8'))
        except Exception:
            data = dict()
        return data

    def id_to_uri(self, entity_id):
        """
        Convert entity id to uri of the entity.

        Parameters
        ----------

        entity_id: str
            Id of an entity.

        Returns
        -------

        uri: str
            URI of the entity.
        """
        uri = self._base_data_url + "/" + quote(entity_id, "/:_")
        uri.replace(r"//", r"/")
        return uri

