"""Contains the DbpediaMetadata Class."""

import re
from time import sleep
from urllib.parse import unquote, quote
from SPARQLWrapper import SPARQLWrapper, JSON
from SPARQLWrapper.SPARQLExceptions import QueryBadFormed, EndPointNotFound
from dhtk.extensions.templates.metadata import Metadata

# TODO: adapt this to new project structure



class DbpediaMetadata(Metadata):
    """
    The DbpediaMetadata class for dhtk.

    Acts as interface between dhtk and Dbpedia.

    Specifically allows user to search a dhtk.templates.Book on dbpedia.


    Example
    --------
    ::

        from pprint import pprint
        from dhtk.catalogs.gutenberg.data import GutenbergData
        from dhtk.metadata.dbpedia import DbpediaMetadata

        gutenberg_data = GutenbergData("http://dhtk.unil.ch/gutenberg/sparql")
        author = gutenberg_data.author_from_author_id("http://www.gutenberg.org/2009/agents/100")
        books = gutenberg_data.books_by_author_id(author.get_gutenberg_id())
        book = books[0]

        dbpedia_metadata = DbpediaMetadata()
        dbpedia_metadata.get_authors_metadata_uri(author)
        # 'http://dbpedia.org/resource/Kate_Chopin'

        pprint(dbpedia_metadata.get_author_metadata(author))

        dbpedia_metadata.get_books_metadata_uri(book)
        pprint(dbpedia_metadata.get_book_metadata(book))

    """

    # TODO: Add some persistent cache (books found, books not found) to lessen the interrogation on
    #  dbpedia

    _base_url = "http://dbpedia.org/resource/"
    _base_data_url = "http://dbpedia.org/data/%s.json"

    _sparql_endpoint = SPARQLWrapper("http://dbpedia.org/sparql")

    def __init__(self):
        """

        """
        self._sparql_endpoint.setReturnFormat(JSON)

    def query_dbpedia(self, query):
        """
        Return results of a dbpedia query.

        Parameters
        ----------
        query: str
            A sparql query

        Returns
        -------
        results: dict
            The query results if found in form of a dictionary
            or else the dict: {"boolean": False}.
        """
        sparql = self._sparql_endpoint
        sparql.setQuery(query)
        try:
            results = sparql.queryAndConvert()
            return results
        except QueryBadFormed:
            return {"boolean": False}
        except EndPointNotFound:
            # TODO: WARNING
            sleep(3000)
            return {"boolean": False}

    def _test_book_uri(self, uri):
        """
        Check if the uri is the uri of a dbo:Book in dbpedia.

        Parameters
        ----------
        uri: str

        Return
        ------
        query_result: boolean
            if the uri does not exist, function query_dbpedia adds False to the dict key "boolean"
        """
        query = "ASK {<%s> rdf:type dbo:Book.}" % uri
        return self.query_dbpedia(query)['boolean']

    def get_book_metadata(self, book):
        """
        Data for metadata of a book.

        Parameters
        ----------
        book: dhtk.templates.book.Book
            an instance of Book in dhtk.templates.book

        Return
        ------
        metadata: dict
        """
        uri = self.get_books_metadata_uri(book)
        if not uri:
            return {}
        entity_id = self.uri_to_id(uri)
        metadata = self.get_data(entity_id)
        metadata["dbpedia"] = uri
        metadata["dbpedia_id"] = entity_id

        return metadata

    def _test_person_uri(self, uri):
        """
        Check if the given uri is the uri of a dbo:Person in dbpedia.

        Parameters
        ----------
            uri: str

        Return
        ------
            if the uri does not exist, function query_dbpedia adds False to the dict key "boolean"
        """
        query = "ASK {<%s> rdf:type dbo:Person. }" % uri
        return self.query_dbpedia(query)['boolean']

    def search_authors_metadata_uri(self, author):
        """
        Data the uri of the author in DBPEDIA.

        Parameters
        ----------
        author: dhtk.templates.author.Author
            An instance of Author.

        Returns
        -------
            author_id_uri: str
        """

        for web_site in author.metadata.get("web_pages", []):
            uri = "http://dbpedia.org/resource/{}".format(
                unquote(quote(web_site.rsplit("/", 1)[1]))
            )
            if self._test_person_uri(uri):
                # LOGGER.info("Found author uri from webpages.")
                return uri

        uri = "http://dbpedia.org/resource/{}".format(
            author.get_first_name().replace(" ", "_") + "_" +
            author.get_last_name().replace(" ", "_")
        )
        if self._test_person_uri(uri):
            # LOGGER.info("Found author uri from name.")
            return uri

        for alias in author.metadata.get("aliases", []):
            if ", " in alias:
                alias = "_".join(alias.split(", ")[::-1])
            uri = "http://dbpedia.org/resource/{}".format(unquote(quote(alias)))
            if self._test_person_uri(uri):
                # LOGGER.info("Found author uri from aliases.")
                return uri

        return ""

    @staticmethod
    def get_possible_author_uri_list(author):
        """

        Parameters
        ----------
        author

        Returns
        -------
        """
        pass

    def search_books_metadata_uri(self, book, author_uri=None):
        """
        Return the uri of the book in DBPEDIA.


        Parameters
        ----------
        book: dhtk.templates.book.Book
            an instance of Book in dhtk.templates.book
        author_uri: str

        Return
        ------
            uri of book: str
        """
        # TODO: clean-up this method using a list of replacement tuples and optional suffixes.
        # TODO: remove Volume (Vol 1) and such information at the end of the title.
        # TODO: use fuzzy matching.
        # TODO: maybe get full list of book titles in dbpedia and search in that list.

        base_url = "http://dbpedia.org/resource/{}"
        if not author_uri:
            author_uri = self.get_authors_metadata_uri(book.get_author())
        title = book.get_title()
        if author_uri:
            # LOGGER.info("Author URI found: %s .", author_uri)
            query = """
                PREFIX dbo: <http://dbpedia.org/ontology/>
                SELECT ?dbpedia_uri
                WHERE {
                  ?dbpedia_uri ?author <%s>
                 {?dbpedia_uri dbo:author <%s> .}
                UNION
                 {?dbpedia_uri dbo:writer <%s> .}
                }
            """ % (author_uri, author_uri, author_uri)
            # TODO: implement following queries
            # query_2 =
            # """
            #     PREFIX dbo: <http://dbpedia.org/ontology/>
            #     PREFIX dbp: <http://dbpedia.org/property/>
            #     prefix dbr: <http://dbpedia.org/resource/>
            #     prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            #     prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            #     prefix owl: <http://www.w3.org/2002/07/owl#>
            #     prefix pgterms: <http://www.gutenberg.org/2009/pgterms/>
            #     prefix dcterms: <http://purl.org/dc/terms/>
            #     prefix dcam: <http://purl.org/dc/dcam/>
            #
            #     SELECT DISTINCT ?dbpedia_uri ?title
            #     WHERE {
            #     ?dbpedia_uri ?author dbr:Leonid_Andreyev
            #     {?dbpedia_uri dbo:author dbr:Leonid_Andreyev .}
            #     UNION
            #     {?dbpedia_uri dbo:writer dbr:Leonid_Andreyev .}
            #     ?dbpedia_uri ?label ?title
            #     {?dbpedia_uri rdfs:label ?title}
            #     UNION
            #     {?dbpedia_uri foaf:name ?title}
            #     UNION
            #     {?dbpedia_uri dbp:name ?title}
            #     UNION
            #     {?dbpedia_uri dbp:title ?title}
            #     }
            # """
            # # query_3 =
            # """
            # PREFIX dbo: < http://dbpedia.org/ontology/>
            # SELECT *
            # WHERE {
            # ?dbpedia_uri dbo: author <%s>.
            # ?alias dbo: wikiPageRedirects ?dbpedia_uri.
            # """
            book_uris = self.query_dbpedia(query)

            clean_titles = [t.replace(base_url[:-2], "").replace(
                " (_novel)", "").replace("_", " ") for t in book_uris]

            if title in clean_titles:
                return base_url.format(title)

            letters_only = [re.sub(r"[^A-Za-z]", "", t) for t in clean_titles]
            for to_remove in ["", r"\n.+", r";.+", r":.+"]:
                letters_only_title = re.sub(r"[^A-Za-z]", "", re.sub(to_remove, "", title))
                if letters_only_title in letters_only:
                    return book_uris[letters_only.index(letters_only_title)]
            # LOGGER.info("Could not find book URI with author info provided.")
        else:
            print("Author URI not found.")
            # LOGGER.info("Author URI not found.")

        if "\n" in title:
            uri = base_url.format(unquote(quote(
                title.replace("\n", ", ").replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                title.replace("\n", " ").replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                re.sub(r"\n.+", "", title).replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

        if ":" in title:
            uri = base_url.format(unquote(quote(
                title.replace(":", ", ").replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                title.replace(":", " ").replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                re.sub(r":.+", "", title).replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

        if ";" in title:
            uri = base_url.format(unquote(quote(
                title.replace(";", ", ").replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                title.replace(";", " ").replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                re.sub(r";.+", "", title).replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

        if "(" in title:
            uri = base_url.format(unquote(quote(
                re.sub(r" [(].+[)]", "", title).replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

        if "[" in title:
            uri = base_url.format(unquote(quote(
                re.sub(r"[[].+[]]", "", title).replace(" ", "_")
            )))
            if self._test_book_uri(uri):
                return uri

            uri = base_url.format(unquote(quote(
                re.sub(r"[[].+[]]", "", title) + "_(novel)"
            )))
            if self._test_book_uri(uri):
                return uri

        uri = base_url.format(unquote(quote(
            title.replace(" ", "_")
        )))
        if self._test_book_uri(uri):
            return uri

        uri = base_url.format(unquote(quote(
            title.replace(" ", "_") + "_(novel)"
        )))
        if self._test_book_uri(uri):
            return uri

        uri = base_url.format(unquote(quote(
            title.replace(" ", "-")
        )))
        if self._test_book_uri(uri):
            return uri

        uri = base_url.format(unquote(quote(
            re.sub(r";.+", "", title.replace(" ", "-"))
        )))
        if self._test_book_uri(uri):
            return uri

        uri = base_url.format(unquote(quote(
            title.replace(" ", "-") + "_(novel)"
        )))
        if self._test_book_uri(uri):
            return uri
        # LOGGER.info("Book uri not found.")
        return ""

    @staticmethod
    def get_possible_book_uri_list(book):
        """

        Parameters
        ----------
        book

        Returns
        -------

        """
        pass
