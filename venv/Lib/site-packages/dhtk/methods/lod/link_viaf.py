"""Contains the ViafMetadata Class."""

import re
import requests
import urllib3
from fake_useragent import UserAgent
from dhtk.extensions.templates.metadata import Metadata

# TODO: adapt this to new project structure


class ViafMetadata(Metadata):
    """Viaf Metadata

    The class reuniting all viaf metadata search methods.

    Attributes
    ----------
    _author_query_base_uri: str
        The uri with which to search an author with the viaf api.

    Example
    --------
    ::

    Example
    -------
    ::

        from pprint import pprint
        from dhtk.catalogs.gutenberg.data import GutenbergData
        from dhtk.metadata.viaf import ViafMetadata

        gutenberg_data = GutenbergData("http://dhtk.unil.ch/gutenberg/sparql")
        author = gutenberg_data.author_from_author_id("http://www.gutenberg.org/2009/agents/100")
        books = gutenberg_data.books_by_author_id(author.get_gutenberg_id())
        book = books[0]

        author.same_as.update({ "http://viaf.org/viaf/46758932/" : "manual"})

        viaf_metadata = ViafMetadata()
        viaf_metadata.get_authors_metadata_uri(author)
        # 'http://www.wikidata.org/entity/Q230476'

        pprint(viaf_metadata.get_author_metadata(author))

        viaf_metadata.get_books_metadata_uri(book)
        pprint(viaf_metadata.get_book_metadata(book))
    """
    _base_url = "http://viaf.org/viaf/"
    _base_data_url = "https://viaf.org/viaf/%s/viaf.json"

    _author_query_base_uri = "http://viaf.org/viaf/search?query=" \
                             'local.personalNames="%s"&httpAccept=application/json'
    _book_query_base_uri = "http://viaf.org/viaf/search?query=" \
                           'local.uniformTitleWorks="%s"&httpAccept=application/json'

    def search_authors_metadata_uri(self, author):
        """Method to search the viaf uri and id of an author.

        Parameters
        ----------
        author: dhtk.templates.author.Author
            An author.

        Returns
        -------
        metadata_uri: str
            the author's metadata uri.
        """
        author_string = ""
        if author.metadata.get("gutenberg_name"):
            author_string += author.metadata["gutenberg_name"]
        else:
            author_string += author.get_last_name() + ", " + author.get_first_name() + " " + author.get_middle_name()
            author_string.strip()
        if author.get_birth_date():
            author_string += " " + author.get_birth_date()
            if author.get_death_date():
                author_string += "-" + author.get_death_date()

        author_string = author_string.replace('"', '\"').strip()

        query = self._author_query_base_uri % author_string
        # LOGGER.debug("Query: %s", query)
        user_agent = UserAgent().firefox
        try:
            response = requests.get(query, headers={'User-Agent': str(user_agent)})
        except (
                ConnectionResetError,
                urllib3.exceptions.ProtocolError,
                requests.exceptions.ConnectionError
        ):
            return None

        if not (response and response.status_code == 200):
            # LOGGER.debug("Response not valid")
            return None

        data = response.json()
        result = None

        if not data['searchRetrieveResponse'].get("records", False):
            # LOGGER.debug("Data does not contain records")
            return None

        records = data['searchRetrieveResponse']['records']
        result = None
        for record in records:
            data = record['record']['recordData']
            if data.get('nameType', "") in ["Personal", "Corporate"]:
                result = data['viafID']
                break

            if data.get('titles', False) and \
                    data['titles'].get("author", False):
                if isinstance(data['titles'], list):
                    for j in range(len(data['titles'])):
                        if data['titles']['author'][j].get('@id', False):
                            result = data['titles']['author'][j]['@id']
                        else:
                            result = data['titles']['author']['@id']
                        break
        if result:
            viaf_id = re.sub(r"\D", "", result)
            return "http://viaf.org/viaf/%s" % viaf_id
        # LOGGER.debug("No valid result found!")
        return None

    def search_books_metadata_uri(self, book):
        """

        Parameters
        ----------
        book

        Returns
        -------

        """
        pass

    @staticmethod
    def get_possible_author_uri_list(author):
        """

        Parameters
        ----------
        author

        Returns
        -------

        """
        pass

    @staticmethod
    def get_possible_book_uri_list(book):
        """

        Parameters
        ----------
        book

        Returns
        -------

        """

    pass


