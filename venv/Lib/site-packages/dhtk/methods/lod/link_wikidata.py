"""Contains the WikidataMetadata Processing Class."""

from dhtk.extensions.templates.metadata import Metadata

# TODO: adapt this to new project structure


class WikidataMetadata(Metadata):
    """
    Example
    -------
    ::

        from pprint import pprint
        from dhtk.catalogs.gutenberg.data import GutenbergData
        from dhtk.metadata.wikidata import WikidataMetadata

        gutenberg_data = GutenbergData("http://dhtk.unil.ch/gutenberg/sparql")
        book = gutenberg_data.book_from_book_id("http://www.gutenberg.org/ebooks/6450")

        author = book.get_author()

        wikidata_metadata = WikidataMetadata()
        wikidata_metadata.get_authors_metadata_uri(book)
        # 'http://wikidata.org/entity/Q470844''

        pprint(wikidata_metadata.get_author_metadata(book))
        pprint(wikidata_metadata.get_author_metadata(author))

    """

    _base_url = "http://wikidata.org/entity/"
    _base_data_url = "https://wikidata.org/wiki/Special:EntityData/%s.json"

    def search_authors_metadata_uri(self, author):
        """

        Parameters
        ----------
        author

        Returns
        -------

        """
        pass

    def search_books_metadata_uri(self, book):
        """

        Parameters
        ----------
        book

        Returns
        -------

        """
        pass

    @staticmethod
    def get_possible_author_uri_list(author):
        """

        Parameters
        ----------
        author

        Returns
        -------

        """
        pass

    @staticmethod
    def get_possible_book_uri_list(book):
        """

        Parameters
        ----------
        book

        Returns
        -------

        """

        pass
